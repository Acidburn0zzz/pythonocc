#!/usr/bin/scons
# coding: UTF-8

##Copyright 2008, 2009 Thomas Paviot
##
##thomas.paviot@free.fr
##
##pythonOCC is a computer program whose purpose is to provide a complete set
##of python bindings for OpenCasacde library.
##
##This software is governed by the CeCILL license under French law and
##abiding by the rules of distribution of free software.  You can  use, 
##modify and/ or redistribute the software under the terms of the CeCILL
##license as circulated by CEA, CNRS and INRIA at the following URL
##"http://www.cecill.info". 
##
##As a counterpart to the access to the source code and  rights to copy,
##modify and redistribute granted by the license, users are provided only
##with a limited warranty  and the software's author,  the holder of the
##economic rights,  and the successive licensors  have only  limited
##liability. 
##
##In this respect, the user's attention is drawn to the risks associated
##with loading,  using,  modifying and/or developing or reproducing the
##software by the user in light of its specific status of free software,
##that may mean  that it is complicated to manipulate,  and  that  also
##therefore means  that it is reserved for developers  and  experienced
##professionals having in-depth computer knowledge. Users are therefore
##encouraged to load and test the software's suitability as regards their
##requirements in conditions enabling the security of their systems and/or 
##data to be ensured and,  more generally, to use and operate it in the 
##same conditions as regards security. 
##
##The fact that you are presently reading this means that you have had
##knowledge of the CeCILL license and that you accept its terms.

from distutils import sysconfig, msvccompiler
import os
import sys
import commands

#
# First define platform specific settings
#
#
# Define pythonOCC version
#
VERSION = '2009/02/23'
#
# Define paths
#
try:
    OCC_ROOT = os.environ['CASROOT']
except KeyError:
    print "OopenCascade CAS_ROOT environment variable not set."
    OCC_ROOT = None

if sys.platform=='win32':
    SWIG_FILES_PATH_MODULAR = os.path.join(os.getcwd(),'SWIG_src_modular_win32')
    # Try to find OCC paths from environment analysis
    if OCC_ROOT!=None:
        OCC_INC = os.path.join(OCC_ROOT,'inc')
        OCC_LIB = os.path.join(OCC_ROOT,'win32','lib')
    else:
        OCC_INC='C:/OCC/ros/inc'
        OCC_LIB='C:/OCC/ros/win32/lib'
    GCC_XML_PATH = os.path.join(os.getcwd(),'pygccxml','gccxml_bin','v09','win32','bin')
    PYGCCXML_DEFINES = ['WNT','__SWIG_GENERATION__','CSFDB','WIN32','_WINDOWS']
    DEFINE_MACROS = ['WNT','WIN32','_WINDOWS','CSFDB','NDEBUG']
    ECA = ['/Ox','/MD','/W3','/GX','/link']
    SWIG_OPTS = ['-O','-c++','-DWNT','-Wall','-DCSFDB','-DWIN32','-D_WINDOWS','-outdir','%s'%os.path.join(os.getcwd(),'OCC')]
    ELA = []
    
elif sys.platform=='linux2':
    architecture = commands.getoutput('apt-cache').split(" ")[3] #returns i386, i686 etc.
    SWIG_FILES_PATH_MODULAR = os.path.join(os.getcwd(),'SWIG_src_modular_linux_darwin')
    OCC_INC = '/usr/local/inc' # Ubuntu 8.04 Hardy default installation path for headers
    CONFIG_H_PATH = 'complete'
    OCC_LIB = '/usr/local/lib' # Ubuntu 8.04 Hardy default installation path for libraries
    GCC_XML_PATH = '/usr/bin' # Ubuntu 8.04 Hardy installation path for gccxml
    PYGCCXML_DEFINES = ['HAVE_CONFIG_H','HAVE_LIMITS_H','CSFDB','OCC_CONVERT_SIGNALS','LIN','LININTEL','_GNU_SOURCE=1']
    DEFINE_MACROS = ['HAVE_CONFIG_H','HAVE_LIMITS_H','CSFDB','OCC_CONVERT_SIGNALS','LIN','LININTEL',('_GNU_SOURCE','1')]
    SWIG_OPTS = ['-modern','-fcompact','-c++','-DHAVE_LIMITS_H','-DHAVE_CONFIG_H','-DCSFDB',\
                 '-DOCC_CONVERT_SIGNALS','-DLIN','-DLININTEL','-D_GNU_SOURCE=1',\
                 '-outdir','%s'%os.path.join(os.getcwd(),'OCC')]
    ECA = ['-O0']
    lib_python = sysconfig.get_config_var('BLDLIBRARY').split(' ')[1]
    ELA = ['-Wl,--no-undefined','-lm','-lstdc++',lib_python]
elif sys.platform=='darwin':
    SWIG_FILES_PATH_MODULAR = os.path.join(os.getcwd(),'SWIG_src_modular_linux_darwin')
    architecture = commands.getoutput('apt-cache').split(" ")[3] #returns i386, i686 etc.
    OCC_INC = '/usr/local/inc'
    OCC_LIB = '/usr/local/lib'
    GCC_XML_PATH = '/usr/bin' 
    PYGCCXML_DEFINES = ['HAVE_CONFIG_H','HAVE_LIMITS_H','CSFDB','OCC_CONVERT_SIGNALS']
    DEFINE_MACROS = [('HAVE_CONFIG_H',None),('HAVE_LIMITS_H',None),('CSFDB',None),('OCC_CONVERT_SIGNALS',None)]
    SWIG_OPTS = ['-modern','-fcompact','-c++','-DHAVE_LIMITS_H','-DHAVE_CONFIG_H','-DCSFDB',\
                 '-DOCC_CONVERT_SIGNALS',\
                 '-outdir','%s'%os.path.join(os.getcwd(),'OCC')]
    ECA = ['-O0']
    lib_python = sysconfig.get_config_var('BLDLIBRARY').split(' ')[1]
    ELA = ['-Wl,--no-undefined','-lm','-lstdc++',lib_python]
else:
    raise "Unsupported platform"
print OCC_INC
#
# Build environment
#
env = Environment()
#
# Build Options
#
opts=Variables()
opts.AddVariables(
('OCC_INC','Directories where to look for OpenCascade headers',['/usr/inc','/usr/local/inc','./inc',OCC_INC],None,Split),
)
opts.Update(env)


print 'Build pythonOCC %s for platform: %s'%(VERSION,env['PLATFORM'])
#
# Set right path to compiler
#
if env['PLATFORM']=='win32':
	mymsvc = msvccompiler.MSVCCompiler()
	mymsvc.initialize()
	env['CC'] = '"%s"'%mymsvc.cc
else: #Linux
	env.Append(CXXFLAGS=Split('-O3 -ffast-math -march=%s'%architecture))
env.Append(CXXFLAGS=ECA)
env.Append(CPPDEFINES=DEFINE_MACROS)	
	
print 'C++ compiler: %s'%env['CC']
#C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\bin\cl.exe /c /nologo /Ox /MD /W3 /GX /DNDEBUG -DWNT -D
#WIN32 -D_WINDOWS -DCSFDB -IC:\Developpement\OpenCASCADE_6_3_0\ros\inc -IC:\Developpement\Python25\include -IC:
#Developpement\Python25\PC /TpC:\DEVELO~1\PYTHON~2\src\SWIG_src_modular_win32\TColGeom2d_wrap.cpp /Fobuild\tem
#p.win32-2.5\Release\DEVELO~1\PYTHON~2\src\SWIG_src_modular_win32\TColGeom2d_wrap.obj /link /MACHINE:X86 /SUBSY
#STEM:CONSOLE TColGeom2d_wrap.cpp
#
# Setting paths
#
PYTHON_INC = sysconfig.get_python_inc() #Platform independant statement
env.Append( CPPPATH= [PYTHON_INC,OCC_INC])
env.Append( LIBPATH = [OCC_LIB] )
if env['PLATFORM']!='win32':
    env.Append( CPPPATH= [CONFIG_H_PATH])
#
# Check configuration
#
dirs = ['/usr/src']

def CheckCXX(context):
	context.Message('Checking whether c++ compiler "%s" works...'%env['CC'])
	ret=context.TryLink('#include<iostream>\nint main(int argc, char**argv){std::cerr<<std::endl;return 0;}\n','.cpp')
	context.Result(ret)
	return ret
	
def CheckOCC(context):
	occdirs = env['OCC_INC']
	print occdirs
	for occdir in occdirs:
		context.Message( 'Checking for OpenCascade headers in '+occdir+'... ' )
		context.env['OCC_INC']=occdir
		ret=context.TryLink('/**/','.cpp')##include<Standard.hxx>;\n','.cpp')
		context.Result(ret)
		if not ret:
			print "Pas bon!!"
		else:
			return ret
	return False	

conf = env.Configure(custom_tests={'CheckCXX':CheckCXX,'CheckOCC':CheckOCC},)
conf.CheckCXX()
conf.CheckOCC()
conf.CheckCXXHeader('stdlib.h','<>')
conf.CheckCXXHeader('string.h','<>')
conf.CheckCXXHeader('Python.h','<>')
conf.CheckCXXHeader('stdexcept','<>')

env = conf.Finish()

#
# Build
#
env.Program(target='bar', source=['test_wrap.cpp'])
